{-# LANGUAGE GeneralizedNewtypeDeriving #-}

module Briefcase.CashFlow where

import Data.Hourglass (Date(..), Period(..), dateAddPeriod)

{-|
Extract a range of dates from a list. This would be useful to say "the cash
flows for next year", thus bridging between a known time range and infinite
lists generated by the repeating functions below
-}
rangeDates :: Date -> Date -> [Date] -> [Date]
rangeDates from unto list = start list
  where
    start [] = []
    start (date:dates) = if (from > date)
        then start dates
        else finish (date:dates)

    finish [] = []
    finish (x:xs) = if x > unto
        then []
        else x : finish xs

quarterlyDates :: Date -> [Date]
quarterlyDates = increment (Period 0 3 0)

monthlyDates :: Date -> [Date]
monthlyDates = increment (Period 0 1 0)

fortnightlyDates :: Date -> [Date]
fortnightlyDates = increment (Period 0 0 14)

{-|
Return an infinite lists of dates incrementing by the period specified,
starting from (and including) the given seed date.
-}
increment :: Period -> Date -> [Date]
increment delta from =
  let
    next = dateAddPeriod from delta
  in
    from : increment delta next
